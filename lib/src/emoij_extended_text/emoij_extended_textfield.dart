import 'package:mcvgo_extended_emoij/src/delegate/emoij_delegate.dart';
import 'package:mcvgo_extended_emoij/src/utils/convert_emoij.dart';
import 'package:mcvgo_extended_emoij/src/utils/emoij_extensions.dart';
import 'package:mcvgo_extended_emoij/src/utils/logger.dart';
import 'package:mcvgo_extended_text_field/extended_text_field.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart' hide InputCounterWidgetBuilder;
import 'dart:ui' as ui;
import 'package:flutter/services.dart';

part 'emoij_special.dart';

part 'emoij_special_span_builder.dart';

class EMOIJExtendedTextField extends ExtendedTextField {
  EMOIJExtendedTextField(
      {TextEditingController? controller,
      FocusNode? focusNode,
      InputDecoration? decoration = const InputDecoration(),
      TextInputType? keyboardType,
      TextInputAction? textInputAction,
      TextCapitalization textCapitalization = TextCapitalization.none,
      TextStyle? style,
      StrutStyle? strutStyle,
      TextAlign textAlign = TextAlign.start,
      TextAlignVertical? textAlignVertical,
      TextDirection? textDirection,
      bool readOnly = false,
      ToolbarOptions? toolbarOptions,
      bool? showCursor,
      bool autofocus = false,
      String obscuringCharacter = 'â€¢',
      bool obscureText = false,
      bool autocorrect = true,
      SmartDashesType? smartDashesType,
      SmartQuotesType? smartQuotesType,
      bool enableSuggestions = true,
      int maxLines = 1,
      int? minLines,
      bool expands = false,
      int? maxLength,
      MaxLengthEnforcement? maxLengthEnforcement,
      ValueChanged<String>? onChanged,
      VoidCallback? onEditingComplete,
      ValueChanged? onSubmitted,
      AppPrivateCommandCallback? onAppPrivateCommand,
      List<TextInputFormatter>? inputFormatters,
      bool? enabled,
      double cursorWidth = 2.0,
      double? cursorHeight,
      Radius? cursorRadius,
      Color? cursorColor,
      ui.BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight,
      ui.BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight,
      Brightness? keyboardAppearance,
      EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
      DragStartBehavior dragStartBehavior = DragStartBehavior.start,
      bool? enableInteractiveSelection,
      TextSelectionControls? selectionControls,
      GestureTapCallback? onTap,
      MouseCursor? mouseCursor,
      InputCounterWidgetBuilder? buildCounter,
      ScrollController? scrollController,
      ScrollPhysics? scrollPhysics,
      Iterable<String>? autofillHints = const <String>[],
      Clip clipBehavior = Clip.hardEdge,
      String? restorationId,
      bool scribbleEnabled = true,
      bool enableIMEPersonalizedLearning = true,
      ShouldShowSelectionHandlesCallback? shouldShowSelectionHandles,
      TextSelectionGestureDetectorBuilderCallback?
          textSelectionGestureDetectorBuilder,
      Key? key})
      : super(
          key: key,
          style: style,
          strutStyle: strutStyle,
          controller: controller,
          textDirection: textDirection,
          textAlign: textAlign,
          maxLines: maxLines,
          specialTextSpanBuilder: EMOIJSpecialTextSpanBuilder(),
          decoration: decoration,
          onTap: onTap,
          autocorrect: autocorrect,
          autofillHints: autofillHints,
          autofocus: autofocus,
          buildCounter: buildCounter,
          clipBehavior: clipBehavior,
          cursorColor: cursorColor,
          cursorHeight: cursorHeight,
          cursorRadius: cursorRadius,
          cursorWidth: cursorWidth,
          dragStartBehavior: dragStartBehavior,
          enabled: enabled,
          enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
          enableInteractiveSelection: enableInteractiveSelection,
          enableSuggestions: enableSuggestions,
          expands: expands,
          focusNode: focusNode,
          inputFormatters: inputFormatters,
          keyboardAppearance: keyboardAppearance,
          keyboardType: keyboardType,
          maxLength: maxLength,
          maxLengthEnforcement: maxLengthEnforcement,
          minLines: minLines,
          mouseCursor: mouseCursor,
          obscureText: obscureText,
          obscuringCharacter: obscuringCharacter,
          onAppPrivateCommand: onAppPrivateCommand,
          onChanged: onChanged,
          onEditingComplete: onEditingComplete,
          onSubmitted: onSubmitted,
          readOnly: readOnly,
          restorationId: restorationId,
          scribbleEnabled: scribbleEnabled,
          scrollController: scrollController,
          scrollPadding: scrollPadding,
          scrollPhysics: scrollPhysics,
          selectionControls: selectionControls,
          selectionHeightStyle: selectionHeightStyle,
          selectionWidthStyle: selectionWidthStyle,
          shouldShowSelectionHandles: shouldShowSelectionHandles,
          showCursor: showCursor,
          smartDashesType: smartDashesType,
          smartQuotesType: smartQuotesType,
          textAlignVertical: textAlignVertical,
          textCapitalization: textCapitalization,
          textInputAction: textInputAction,
          toolbarOptions: toolbarOptions,
          textSelectionGestureDetectorBuilder:
              textSelectionGestureDetectorBuilder,
        );
}
